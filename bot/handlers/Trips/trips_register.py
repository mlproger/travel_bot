from typing import Any, Dict
from aiogram import Router, types, F
from aiogram.utils.markdown import hbold
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types.callback_query import CallbackQuery
from bot.Buttons.button import Button
from bot.handlers.Users.Repo import repo as UR
from map.map import get_point_from_api, set_route
from .Repo import repo
import logging
from aiogram.types import WebAppInfo
from .trips_state import Trip
from aiogram.types import (
    Message,
    ReplyKeyboardRemove,
)



router = Router()
locations = []



@router.message(F.text.casefold() == "‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è")
async def cancel_add_trip(message: Message, state: FSMContext):
    await message.answer(
        "–û—Ç–º–µ–Ω–∏–ª",
        reply_markup = ReplyKeyboardRemove()
    )
    await state.clear()
    await message.answer(
        text="–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup = await Button.trips()
    )


@router.callback_query(F.data == "trip")
async def register_trip1(callback: CallbackQuery):
    await callback.message.edit_text(
        f"–ß—Ç–æ –∏–Ω—Ç–µ—Ä–∏—Å—É–µ—Ç?",
        reply_markup = await Button.trips()
    )



@router.callback_query(F.data == "trip_0")
async def register_trip(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Trip.name)
    await callback.message.edit_text("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ....")
    await callback.message.answer("–ü—Ä–∏—Å—Ç—É–ø–∏–º! –í–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. –ö–∞–∫ –Ω–∞—á—Å—á–µ—Ç '–∫—Ä–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ö–æ–¥'?", reply_markup = Button.cancel_trip)



@router.message(Trip.name)
async def set_trip_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Trip.description)
    data = await state.get_data()
    await message.answer(f"–î–ª—è —á–µ–≥–æ –Ω–∞–º {data['name']}? –ü—Ä–µ–¥–ª–∞–≥–∞—é –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")

@router.message(Trip.description)
async def set_trip_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(Trip.locations)
    await message.answer(f"–î–∞–≤–∞–π —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–∞—Å–ø–ª–∞–Ω–∏—Ä—É–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ. –ö—É–¥–∞ –∏ –∫–æ–≥–¥–∞ –ø–æ–π–¥–µ–º?\n–î–ª—è —ç—Ç–æ–≥–æ –≤–ø–∏—à–∏ —Å—é–¥–∞ –ª–æ–∫–∞—Ü–∏–∏ –≤ —Å–ª–µ–¥—É—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç;–¥–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è;–¥–∞—Ç–∞ –æ—Ç–±—ã—Ç–∏—è\n–ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É\n–î–∞—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥", reply_markup = Button.cancel_trip_location)



@router.message(F.text.casefold() == "‚úÖ –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π")
async def stop(message: types.Message, state: FSMContext):
    global locations
    data = await state.get_data()
    print(data, "DATA")
    await state.set_state(Trip.id)
    await message.answer(
        text="–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
        reply_markup=ReplyKeyboardRemove()
    )
    await finish_add_trip(message=message, data=data, points=locations,state=state)

    locations = []


@router.message(Trip.locations)
async def set_trip_location(message: types.Message, state: FSMContext):
    point = message.text.replace(";", ",")
    if len(point.split(',')) != 3:
        await message.answer(
            text = "–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ '–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç;–¥–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è;–¥–∞—Ç–∞ –æ—Ç–±—ã—Ç–∏—è'"
        )
    else:
        # check = await get_point_from_api(point.split(',')[0])
        # logging.info(check)
        # locations.append(point) 
        try:
            check = await get_point_from_api(point.split(',')[0])
            # logging.info(check)
            locations.append(point) 
        except Exception as e:
            logging.error(e)
            await message.answer(
                text = "–•–º–º–º, —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–≥–æ –º–µ—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑"
            )



async def finish_add_trip(message: Message, data: Dict[str, Any], points, state: FSMContext):
    arr = []
    names = []
    for i in points:
        arr.append(f"{*i.split(','),}")
        names.append(i.split(',')[0])
    s = ""
    for i in range(len(arr)):
        if i != len(arr)-1:
            s += arr[i] + "::location" + ","
        else:
            s += arr[i] + "::location"
    f = f"""
        INSERT INTO trips (Name, description, locations, entity_id) VALUES (
        '{data["name"]}',
        '{data["description"]}',
        ARRAY[
            {s}
        ],
        '{message.from_user.id}'
        )
        """
    print(f)
    _a = repo.add_by_msg(msg=f)
    if _a == "Error":
        await message.answer("–ò–º—è –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ", reply_markup = await Button.trips())
    else:
        print(data["name"])
        trip = repo.get(id=message.from_user.id, id_trip=-2, name= data["name"])[0]
        await state.update_data(id = trip["id"])
        routes = trip["locations"]
        routes = routes.split(',')
        locations = []
        for i in range(len(routes)):
            if i % 3 == 0:
                _point = routes[i].replace('"', '').replace("{", "").replace("(", "").replace("\\", "")
                locations.append(_point)
        msg = f"{hbold('–ù–∞–∑–≤–∞–Ω–∏–µ')}: {trip['name']}\n{hbold('–û–ø–∏—Å–∞–Ω–∏–µ')}: {trip['description']}\n{hbold('–ú–∞—Ä—à—Ä—É—Ç')}:{'->'.join(map(str,locations))}"
        await message.answer(
            text = msg,
            reply_markup = await Button.edit_trip()
        )

        # city = UR.get(message.from_user.id)[0]['city']
        # point_dict = {}
        # point_dict[city] = [await get_point_from_api(city)]
        # for name in names:
        #     point_dict[name] = [await get_point_from_api(name)]
        # print(point_dict)
        # path = await set_route(point_dict)
        # photo = FSInputFile(path)
        # await message.answer_photo(photo, caption=f"–ü–æ–ª–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç {data['name']}. –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è –ø–∞—Ä–µ–π–¥–∏—Ç–µ –∫ –ø—Ä–æ—Å—Ç–æ–º—Ç–æ—Ä—É —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π", reply_markup=ReplyKeyboardRemove())  
        # await state.clear()


@router.callback_query(F.data == "trip_2")
async def back_trip(callback: CallbackQuery):
    await callback.message.edit_text(
        "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–ºüëã",
        reply_markup = Button.main
    )


