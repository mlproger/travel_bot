from typing import Any, Dict
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram import Router, types, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.utils.markdown import hbold
from aiogram.fsm.context import FSMContext
from aiogram.handlers.callback_query import CallbackQuery
from bot.Buttons.button import Button
from .Repo import repo
from .Repo.user_repo import UserRepository
from .user_state import User
from aiogram.types import (
    KeyboardButton,
    InlineKeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder



router = Router()



@router.message(CommandStart())
@router.message(Command("main"))
async def greeting(message: types.Message) -> None:
    print(message.from_user.username)
    _check = repo.get(message.from_user.id)
    if _check == 0:
        print(message.from_user.full_name)
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.full_name)}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Travel Bot\n–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–º –Ω—É–∂–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ)",
            reply_markup = ReplyKeyboardRemove(
                keyboard=[
                    [
                        KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"),
                        KeyboardButton(text="–ù–µ —Ö–æ—á—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è...")
                    ]
                ],
                resize_keyboard = True
            ),
        )
    else:
        print(message.from_user.full_name)
        print(message.from_user.username)
        await message.answer(
            "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–ºüëã",
            reply_markup = Button.main
            # reply_markup = ff()
        )


@router.callback_query(F.data == "profile")
@router.message(Command("me"))
async def get_me(callback: CallbackQuery):
    me = repo.get(callback.message.chat.id)[0]
    if me != 0:
        await callback.message.edit_text(
            f"‚úÖ –ò–º—è: {me['name']}\nüîû –í–æ–∑—Ä–∞—Å—Ç: {me['age']}\nüèôÔ∏è –ì–æ—Ä–æ–¥: {me['city']}\nüåç –°—Ç—Ä–∞–Ω–∞: {me['country']}\n‚ùì –û —Å–µ–±–µ: {me['bio']}",
            reply_markup = Button.profile
        )
    else: 
        await callback.message.edit_text(
            f"–ü—Ä–∏–≤–µ—Ç, {hbold(callback.message.from_user.full_name)}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Travel Bot\n–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–º –Ω—É–∂–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ)",
            reply_markup = ReplyKeyboardRemove(
                keyboard=[
                    [
                        KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"),
                        KeyboardButton(text="–ù–µ —Ö–æ—á—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è...")
                    ]
                ],
                resize_keyboard = True
            ),
        )



@router.message(F.text.casefold() == "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def register_user(message: types.Message, state: FSMContext) -> None:
    await state.set_state(User.age)
    await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç", reply_markup=ReplyKeyboardRemove(),)

@router.message(User.age)
async def set_user_age(message: types.Message, state: FSMContext) -> None:
    age = message.text
    if age.isdigit():
        await state.update_data(age=message.text)
        await state.set_state(User.city)
        await message.answer("–ó–∞–ø–æ–º–Ω–∏–ª, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ üèôÔ∏è")
    else:
        await message.answer("–ù–µ–µ–µ, —Ç–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç. –í–æ–∑—Ä–∞—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑, –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç")



@router.message(User.city)
async def set_user_age(message: types.Message, state: FSMContext) -> None:
    await state.update_data(city=message.text)
    await state.set_state(User.country)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è üåç")


@router.message(User.country)
async def set_user_age(message: types.Message, state: FSMContext) -> None:
    await state.update_data(country=message.text)
    await state.set_state(User.bio)
    await message.answer("–ö—Ä–∞—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ")


@router.message(User.bio)
async def set_user_age(message: types.Message, state: FSMContext) -> None:
    await state.update_data(bio=message.text)
    data = await state.get_data()
    await finish_registration(message=message, data=data)
    await state.clear()

    

async def finish_registration(message: Message, data: Dict[str, Any]):
    print(data)
    print(message.from_user.id)
    data["name"] = message.from_user.full_name
    data["tg_id"] = str(message.from_user.id)
    repo.add(data)
    await message.answer(
        text=f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä–µ—à–µ–Ω–∞, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è üôÇ",
        reply_markup = Button.main
    )



@router.message(F.text.casefold() == "–Ω–µ —Ö–æ—á—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è...")
async def register_user(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ, –∫–æ–≥–¥–∞ —Å–æ–∑—Ä–µ–µ—Ç–µ –¥–ª—è –ø—É—Ç—É—à–µ—Å—Ç–≤–∏–π)", reply_markup=ReplyKeyboardRemove(),)


